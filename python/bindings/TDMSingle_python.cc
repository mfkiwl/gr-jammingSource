/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(TDMSingle.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(6e6931f2e29be9baf2c888afd4a432b8)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <jammingSource/TDMSingle.h>
// pydoc.h is automatically generated in the build directory
#include <TDMSingle_pydoc.h>

void bind_TDMSingle(py::module& m)
{

    using TDMSingle = ::gr::jammingSource::TDMSingle;


    py::class_<TDMSingle,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<TDMSingle>>(m, "TDMSingle", D(TDMSingle))

        .def(py::init(&TDMSingle::make),
             py::arg("sampling_freq"),
             py::arg("wave_freq"),
             py::arg("period"),
             D(TDMSingle, make))


        .def("sampling_freq", &TDMSingle::sampling_freq, D(TDMSingle, sampling_freq))


        .def("period", &TDMSingle::period, D(TDMSingle, period))


        .def("set_sampling_freq",
             &TDMSingle::set_sampling_freq,
             py::arg("sampling_freq"),
             D(TDMSingle, set_sampling_freq))


        .def("set_frequency",
             &TDMSingle::set_frequency,
             py::arg("frequency"),
             D(TDMSingle, set_frequency))


        .def("set_period",
             &TDMSingle::set_period,
             py::arg("period"),
             D(TDMSingle, set_period))

        ;
}
